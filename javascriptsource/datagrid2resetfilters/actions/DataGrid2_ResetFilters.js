// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * @param {string} className - The class set on the datagrid 2
 * @returns {Promise.<void>}
 */
export async function DataGrid2_ResetFilters(className) {
	// BEGIN USER CODE
	const filters = document.querySelectorAll('.' + className + ' .filter-container .form-control, .' + className + ' .dropdown-container .form-control');
	if (filters.length == 0) {
		return Promise.resolve();
	}

	filters.forEach((filter) => {
		debugger;
		const props = Object.keys(filter);
		let ctrls = filter.getAttribute('aria-controls');
		let react = null;
		const dropdownFilter = filter.parentElement.classList.contains("dropdown-container");

		// Reset value
		filter.value = '';

		// Find the __reactProps property of the current filter
		for (let i = 0; i < props.length; i++) {
			if (props[i].includes('__reactProps')) {
				react = props[i];
				break;
			}
		}



		// Reset select dropdown filters
		if (react && filter[react].onClick && dropdownFilter) {
			// Open the dropdown list
			filter[react].onClick();

			const dropdown = document.querySelector('#' + ctrls);
			const multiSelect = dropdown.querySelector('input') !== null;

			if (multiSelect) {
				// Handle multi-select dropdowns
				
				// Get all checked entries
				const checked = dropdown.querySelectorAll('input[checked]');

				checked.forEach((check) => {
					const props = Object.keys(check.parentElement);

					// Uncheck the entry
					check.removeAttribute('checked');

					if (react) {
						check.parentElement[react].onClick({
							target: check.parentElement,
							preventDefault: function() { },
							stopPropagation: function() { }
						});
					}
				});
				// Close the dropdown menu
				filter[react].onClick();
			} else {
				// Handle single-select dropdowns
				const firstOption = dropdown.querySelector("li:first-child");
				if (firstOption) {
					if (react) {
						firstOption[react].onClick({
							target: firstOption,
							preventDefault: function() { },
							stopPropagation: function() { }
						});
					}
				}
			}
		}

		// Trigger the react onchange event
		if (react && filter[react].onChange) {
			filter[react].onChange({ target: filter });
		}
	});

	return Promise.resolve();
	// END USER CODE
}
